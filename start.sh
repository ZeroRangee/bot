#!/bin/bash

# MVEU Telegram Bot - Universal Startup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "========================================"
echo -e "${BLUE}üéì MVEU Telegram Bot - Universal Launcher${NC}"
echo "========================================"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect available container runtime
detect_container_runtime() {
    if command_exists podman; then
        if command_exists podman-compose; then
            CONTAINER_RUNTIME="podman"
            COMPOSE_CMD="podman-compose"
            echo -e "${GREEN}‚úÖ Podman —Å podman-compose –Ω–∞–π–¥–µ–Ω${NC}"
            return 0
        elif podman compose version >/dev/null 2>&1; then
            CONTAINER_RUNTIME="podman"
            COMPOSE_CMD="podman compose"
            echo -e "${GREEN}‚úÖ Podman —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º compose –Ω–∞–π–¥–µ–Ω${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Podman –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ compose${NC}"
        fi
    fi
    
    if command_exists docker; then
        if command_exists docker-compose; then
            CONTAINER_RUNTIME="docker"
            COMPOSE_CMD="docker-compose"
            echo -e "${GREEN}‚úÖ Docker —Å docker-compose –Ω–∞–π–¥–µ–Ω${NC}"
            return 0
        elif docker compose version >/dev/null 2>&1; then
            CONTAINER_RUNTIME="docker"
            COMPOSE_CMD="docker compose"
            echo -e "${GREEN}‚úÖ Docker —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º compose –Ω–∞–π–¥–µ–Ω${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Docker –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ compose${NC}"
        fi
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    return 1
}

# Function to setup environment for containers
setup_container_environment() {
    echo -e "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    
    # Create directories for volumes
    mkdir -p data/{postgres,redis,static,media}
    chmod 755 data data/* 2>/dev/null || true
    
    # Setup backend .env for containers
    if [ ! -f "backend/.env" ]; then
        cat > backend/.env << EOF
DEBUG=True
SECRET_KEY=django-insecure-container-development-key
ALLOWED_HOSTS=*
REDIS_URL=redis://redis:6379/0
TELEGRAM_BOT_TOKEN=7510155003:AAHxU-SkAlo5yN1SoHVzom3b9LIZv-JhPK8
OPENAI_API_KEY=
EOF
        echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω backend/.env –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${NC}"
    else
        # Update Redis URL for containers
        sed -i 's|redis://localhost:6379/0|redis://redis:6379/0|g' backend/.env
        echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Redis URL –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${NC}"
    fi
    
    # Setup Podman network if using Podman
    if [ "$CONTAINER_RUNTIME" = "podman" ]; then
        if ! podman network exists mveu_network 2>/dev/null; then
            echo -e "${BLUE}üåê –°–æ–∑–¥–∞–Ω–∏–µ Podman —Å–µ—Ç–∏...${NC}"
            podman network create mveu_network
            echo -e "${GREEN}‚úÖ –°–µ—Ç—å mveu_network —Å–æ–∑–¥–∞–Ω–∞${NC}"
        fi
    fi
}

# Function to setup environment for local run
setup_local_environment() {
    echo -e "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...${NC}"
    
    # Setup backend .env for local run
    cat > backend/.env << EOF
DEBUG=True
SECRET_KEY=django-insecure-local-development-key
ALLOWED_HOSTS=*
REDIS_URL=redis://localhost:6379/0
TELEGRAM_BOT_TOKEN=7510155003:AAHxU-SkAlo5yN1SoHVzom3b9LIZv-JhPK8
OPENAI_API_KEY=
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω backend/.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞${NC}"
    
    # Check if virtual environment exists
    if [ ! -d "venv" ]; then
        echo -e "${BLUE}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
        python3 -m venv venv
        echo -e "${GREEN}‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ${NC}"
    fi
}

# Function to show container menu
show_container_menu() {
    echo ""
    echo -e "${BLUE}üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å ${CONTAINER_RUNTIME}:${NC}"
    echo "1. üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ (Django + Redis + Nginx)"
    echo "2. üîß –¢–æ–ª—å–∫–æ Django + Redis (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "3. üêò –° PostgreSQL (–≤–º–µ—Å—Ç–æ SQLite)"
    if [ "$CONTAINER_RUNTIME" = "podman" ]; then
        echo "4. üè† Rootless —Ä–µ–∂–∏–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"
    fi
    echo "5. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "6. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "7. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "8. üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    echo "9. üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "0. üèÉ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-9): " choice
}

# Function to start container services
start_container_services() {
    local mode=$1
    
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å ${CONTAINER_RUNTIME}...${NC}"
    
    case $mode in
        1|"full")
            $COMPOSE_CMD up -d --build
            ;;
        2|"minimal")
            $COMPOSE_CMD up -d --build web redis
            ;;
        3|"postgres")
            $COMPOSE_CMD --profile postgres up -d --build
            ;;
        4|"rootless")
            if [ "$CONTAINER_RUNTIME" = "podman" ]; then
                loginctl enable-linger $USER 2>/dev/null || true
                PODMAN_ROOTLESS=1 $COMPOSE_CMD up -d --build web redis
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Rootless —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å Podman${NC}"
                $COMPOSE_CMD up -d --build web redis
            fi
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —Å ${CONTAINER_RUNTIME}!${NC}"
    show_urls "8001"
    show_container_status
}

# Function to show URLs
show_urls() {
    local port=${1:-8000}
    echo ""
    echo -e "${GREEN}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üì± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:     http://localhost:${port}"
    echo "üõ°Ô∏è  Django Admin:        http://localhost:${port}/admin"
    echo "üí¨ –ê–¥–º–∏–Ω–∫–∞ —á–∞—Ç–æ–≤:        http://localhost:${port}/admin-chat"
    echo "üîó API endpoint:         http://localhost:${port}/api/"
    if [ "$port" = "8001" ]; then
        echo "üåê Nginx (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω): http://localhost:80"
    fi
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${YELLOW}üë§ –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞: admin / admin123${NC}"
    echo ""
}

# Function to show container status
show_container_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    $COMPOSE_CMD ps 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
}

# Function to handle container operations
handle_container_operations() {
    case $choice in
        5)
            echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            $COMPOSE_CMD down
            echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
            ;;
        6)
            echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            $COMPOSE_CMD restart
            echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
            show_container_status
            ;;
        7)
            echo -e "${BLUE}üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
            $COMPOSE_CMD logs -f
            ;;
        8)
            echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!${NC}"
            read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...${NC}"
                $COMPOSE_CMD down -v --remove-orphans
                if [ "$CONTAINER_RUNTIME" = "podman" ]; then
                    podman system prune -f
                    podman volume prune -f
                    podman network rm mveu_network 2>/dev/null || true
                else
                    docker system prune -f
                fi
                echo -e "${GREEN}‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã${NC}"
            fi
            ;;
        9)
            show_container_status
            echo ""
            if [ "$CONTAINER_RUNTIME" = "podman" ]; then
                echo -e "${BLUE}üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Podman:${NC}"
                podman --version
                echo "–°–µ—Ç–∏: $(podman network ls --format "{{.Name}}" | tr '\n' ' ')"
                echo "Volumes: $(podman volume ls --format "{{.Name}}" | tr '\n' ' ')"
            else
                echo -e "${BLUE}üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker:${NC}"
                docker --version
                docker-compose --version 2>/dev/null || docker compose version
            fi
            ;;
        0)
            start_local_mode
            ;;
        *)
            start_container_services $choice
            ;;
    esac
}

# Function to start local mode
start_local_mode() {
    echo -e "${BLUE}üèÉ –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)...${NC}"
    
    # Check Python
    if ! command_exists python3; then
        echo -e "${RED}‚ùå Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3: https://python.org/downloads/${NC}"
        exit 1
    fi
    
    setup_local_environment
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Install dependencies
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    cd backend
    pip install -r requirements.txt >/dev/null 2>&1
    
    # Check Redis (optional)
    REDIS_AVAILABLE=false
    if command_exists redis-server; then
        REDIS_AVAILABLE=true
        echo -e "${GREEN}‚úÖ Redis –Ω–∞–π–¥–µ–Ω${NC}"
        # Start Redis if not running
        if ! pgrep redis-server >/dev/null; then
            echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ Redis...${NC}"
            redis-server --daemonize yes 2>/dev/null || true
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Redis –Ω–µ –Ω–∞–π–¥–µ–Ω (WebSocket –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)${NC}"
    fi
    
    # Run migrations
    echo -e "${BLUE}üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...${NC}"
    python manage.py migrate >/dev/null 2>&1
    
    # Create superuser
    echo -e "${BLUE}üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...${NC}"
    python manage.py shell << EOF >/dev/null 2>&1
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@mveu.ru', 'admin123')
    print('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin / admin123')
else:
    print('‚ÑπÔ∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
EOF
    
    echo ""
    echo -e "${GREEN}üéâ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...${NC}"
    show_urls "8000"
    
    # Start Django
    echo -e "${BLUE}üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:8000${NC}"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏${NC}"
    echo ""
    
    python manage.py runserver 0.0.0.0:8000
}

# Main execution
main() {
    # Try to detect container runtime
    if detect_container_runtime; then
        setup_container_environment
        show_container_menu
        handle_container_operations
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (Docker/Podman) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        echo -e "${BLUE}üèÉ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...${NC}"
        echo ""
        echo -e "${BLUE}üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:${NC}"
        echo "   Podman (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): ./install_podman.sh"
        echo "   Docker: https://docker.com/get-started"
        echo ""
        
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫? (Y/n): " confirm
        if [[ ! $confirm =~ ^[Nn]$ ]]; then
            start_local_mode
        else
            echo -e "${BLUE}‚ÑπÔ∏è  –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω${NC}"
            exit 0
        fi
    fi
}

# Handle signals gracefully
trap 'echo -e "\n${YELLOW}üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...${NC}"; exit 0' SIGTERM SIGINT

# Run main function
main "$@"