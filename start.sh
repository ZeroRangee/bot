#!/bin/bash

# MVEU Telegram Bot - Universal Startup Script with Podman
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Linux, macOS, Windows (—á–µ—Ä–µ–∑ WSL/Git Bash)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "========================================"
echo -e "${BLUE}üéì MVEU Telegram Bot - Podman Launcher${NC}"
echo "========================================"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Podman/Podman Compose
check_podman() {
    if ! command_exists podman; then
        echo -e "${RED}‚ùå Podman –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Podman:${NC}"
        echo "  Ubuntu/Debian: sudo apt install podman"
        echo "  CentOS/RHEL:   sudo dnf install podman"
        echo "  macOS:         brew install podman"
        echo "  Windows:       https://podman.io/getting-started/installation"
        exit 1
    fi
    
    # Check for podman-compose or podman compose
    COMPOSE_CMD=""
    if command_exists podman-compose; then
        COMPOSE_CMD="podman-compose"
        echo -e "${GREEN}‚úÖ Podman –∏ podman-compose –Ω–∞–π–¥–µ–Ω—ã${NC}"
    elif podman compose version >/dev/null 2>&1; then
        COMPOSE_CMD="podman compose"
        echo -e "${GREEN}‚úÖ Podman —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º compose –Ω–∞–π–¥–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå Podman Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ podman-compose:${NC}"
        echo "  pip3 install podman-compose"
        echo "  –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π: podman compose"
        exit 1
    fi
    
    export COMPOSE_CMD
}

# Function to setup environment
setup_environment() {
    echo -e "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    
    # Copy example env if not exists
    if [ ! -f "backend/.env" ]; then
        if [ -f "backend/.env.example" ]; then
            cp backend/.env.example backend/.env
            echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω backend/.env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞${NC}"
        else
            # Create minimal .env
            cat > backend/.env << EOF
DEBUG=True
SECRET_KEY=django-insecure-local-development-key
ALLOWED_HOSTS=*
REDIS_URL=redis://redis:6379/0
TELEGRAM_BOT_TOKEN=7510155003:AAHxU-SkAlo5yN1SoHVzom3b9LIZv-JhPK8
OPENAI_API_KEY=
EOF
            echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backend/.env${NC}"
        fi
    fi
    
    # Create frontend .env if not exists
    if [ ! -f "frontend/.env" ]; then
        cat > frontend/.env << EOF
REACT_APP_BACKEND_URL=http://localhost:8001
WDS_SOCKET_PORT=3000
EOF
        echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω frontend/.env${NC}"
    fi
    
    # Setup Podman network if not exists
    if ! podman network exists mveu_network 2>/dev/null; then
        echo -e "${BLUE}üåê –°–æ–∑–¥–∞–Ω–∏–µ Podman —Å–µ—Ç–∏...${NC}"
        podman network create mveu_network
        echo -e "${GREEN}‚úÖ –°–µ—Ç—å mveu_network —Å–æ–∑–¥–∞–Ω–∞${NC}"
    fi
}

# Function to show menu
show_menu() {
    echo ""
    echo -e "${BLUE}üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo "1. üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ (Django + Redis + Nginx)"
    echo "2. üîß –¢–æ–ª—å–∫–æ Django + Redis (–±–µ–∑ Nginx)"
    echo "3. üêò –° PostgreSQL (–≤–º–µ—Å—Ç–æ SQLite)"
    echo "4. üè† Rootless —Ä–µ–∂–∏–º (–±–µ–∑ sudo)"
    echo "5. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "6. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "7. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "8. üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    echo "9. üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-9): " choice
}

# Function to start services
start_services() {
    local profile=$1
    local rootless=$2
    
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å Podman...${NC}"
    
    if [ "$rootless" = "true" ]; then
        echo -e "${YELLOW}üè† –ó–∞–ø—É—Å–∫ –≤ rootless —Ä–µ–∂–∏–º–µ${NC}"
        # Enable lingering for rootless containers
        loginctl enable-linger $USER 2>/dev/null || true
    fi
    
    case $profile in
        "full")
            $COMPOSE_CMD up -d --build
            ;;
        "minimal")
            $COMPOSE_CMD up -d --build web redis
            ;;
        "postgres")
            $COMPOSE_CMD --profile postgres up -d --build
            ;;
        "rootless")
            # Force rootless mode
            PODMAN_ROOTLESS=1 $COMPOSE_CMD up -d --build web redis
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —Å Podman!${NC}"
    show_urls
    show_status
}

# Function to show URLs
show_urls() {
    echo ""
    echo -e "${GREEN}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üì± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:     http://localhost:8001"
    echo "üõ°Ô∏è  Django Admin:        http://localhost:8001/admin"
    echo "üí¨ –ê–¥–º–∏–Ω–∫–∞ —á–∞—Ç–æ–≤:        http://localhost:8001/admin-chat"
    echo "üîó API endpoint:         http://localhost:8001/api/"
    echo "üåê Nginx (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω): http://localhost:80"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${YELLOW}üë§ –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞: admin / admin123${NC}"
    echo ""
}

# Function to show status
show_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Podman:${NC}"
    $COMPOSE_CMD ps
    
    echo ""
    echo -e "${BLUE}üîç Podman –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

# Function to show logs
show_logs() {
    echo -e "${BLUE}üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    $COMPOSE_CMD logs -f
}

# Function to stop services
stop_services() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Podman...${NC}"
    $COMPOSE_CMD down
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# Function to restart services
restart_services() {
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ Podman...${NC}"
    $COMPOSE_CMD restart
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
    show_status
}

# Function to clean data
clean_data() {
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Podman...${NC}"
        $COMPOSE_CMD down -v --remove-orphans
        
        # Clean Podman system
        podman system prune -f
        podman volume prune -f
        
        # Remove network if exists
        podman network rm mveu_network 2>/dev/null || true
        
        echo -e "${GREEN}‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
    fi
}

# Function to show podman info
show_podman_info() {
    echo -e "${BLUE}üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Podman:${NC}"
    echo "–í–µ—Ä—Å–∏—è Podman: $(podman --version)"
    if command_exists podman-compose; then
        echo "–í–µ—Ä—Å–∏—è Compose: $(podman-compose --version)"
    fi
    echo ""
    echo -e "${BLUE}üåê –°–µ—Ç–∏ Podman:${NC}"
    podman network ls
    echo ""
    echo -e "${BLUE}üíæ Volumes Podman:${NC}"
    podman volume ls
}

# Main execution
main() {
    check_podman
    setup_environment
    
    show_menu
    
    case $choice in
        1)
            start_services "full"
            ;;
        2)
            start_services "minimal"
            ;;
        3)
            start_services "postgres"
            ;;
        4)
            start_services "rootless" "true"
            ;;
        5)
            stop_services
            ;;
        6)
            restart_services
            ;;
        7)
            show_logs
            ;;
        8)
            clean_data
            ;;
        9)
            show_status
            show_podman_info
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            exit 1
            ;;
    esac
}

# Handle signals gracefully
trap 'echo -e "\n${YELLOW}üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...${NC}"; exit 0' SIGTERM SIGINT

# Run main function
main "$@"