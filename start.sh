#!/bin/bash

# MVEU Telegram Bot - Universal Startup Script
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Linux, macOS, Windows (—á–µ—Ä–µ–∑ WSL/Git Bash)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "========================================"
echo -e "${BLUE}üéì MVEU Telegram Bot - Universal Launcher${NC}"
echo "========================================"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Docker/Docker Compose
check_docker() {
    if ! command_exists docker; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker —Å https://docker.com/get-started${NC}"
        exit 1
    fi
    
    if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã${NC}"
}

# Function to setup environment
setup_environment() {
    echo -e "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    
    # Copy example env if not exists
    if [ ! -f "backend/.env" ]; then
        if [ -f "backend/.env.example" ]; then
            cp backend/.env.example backend/.env
            echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω backend/.env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞${NC}"
        else
            # Create minimal .env
            cat > backend/.env << EOF
DEBUG=True
SECRET_KEY=django-insecure-local-development-key
ALLOWED_HOSTS=*
REDIS_URL=redis://redis:6379/0
TELEGRAM_BOT_TOKEN=7510155003:AAHxU-SkAlo5yN1SoHVzom3b9LIZv-JhPK8
OPENAI_API_KEY=
EOF
            echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backend/.env${NC}"
        fi
    fi
    
    # Create frontend .env if not exists
    if [ ! -f "frontend/.env" ]; then
        cat > frontend/.env << EOF
REACT_APP_BACKEND_URL=http://localhost:8001
WDS_SOCKET_PORT=3000
EOF
        echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω frontend/.env${NC}"
    fi
}

# Function to show menu
show_menu() {
    echo ""
    echo -e "${BLUE}üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo "1. üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ (Django + Redis + Nginx)"
    echo "2. üîß –¢–æ–ª—å–∫–æ Django + Redis (–±–µ–∑ Nginx)"
    echo "3. üêò –° PostgreSQL (–≤–º–µ—Å—Ç–æ SQLite)"
    echo "4. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "6. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "7. üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-7): " choice
}

# Function to start services
start_services() {
    local profile=$1
    local compose_cmd="docker-compose"
    
    # Check if docker compose (new syntax) is available
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    case $profile in
        "full")
            $compose_cmd up -d --build
            ;;
        "minimal")
            $compose_cmd up -d --build web redis
            ;;
        "postgres")
            $compose_cmd --profile postgres up -d --build
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    show_urls
    show_status
}

# Function to show URLs
show_urls() {
    echo ""
    echo -e "${GREEN}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üì± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:     http://localhost:8001"
    echo "üõ°Ô∏è  Django Admin:        http://localhost:8001/admin"
    echo "üí¨ –ê–¥–º–∏–Ω–∫–∞ —á–∞—Ç–æ–≤:        http://localhost:8001/admin-chat"
    echo "üîó API endpoint:         http://localhost:8001/api/"
    echo "üåê Nginx (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω): http://localhost:80"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${YELLOW}üë§ –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞: admin / admin123${NC}"
    echo ""
}

# Function to show status
show_status() {
    local compose_cmd="docker-compose"
    
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    $compose_cmd ps
}

# Function to show logs
show_logs() {
    local compose_cmd="docker-compose"
    
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${BLUE}üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    $compose_cmd logs -f
}

# Function to stop services
stop_services() {
    local compose_cmd="docker-compose"
    
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    $compose_cmd down
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# Function to restart services
restart_services() {
    local compose_cmd="docker-compose"
    
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    $compose_cmd restart
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
    show_status
}

# Function to clean data
clean_data() {
    local compose_cmd="docker-compose"
    
    if docker compose version >/dev/null 2>&1; then
        compose_cmd="docker compose"
    fi
    
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...${NC}"
        $compose_cmd down -v --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
    fi
}

# Main execution
main() {
    check_docker
    setup_environment
    
    show_menu
    
    case $choice in
        1)
            start_services "full"
            ;;
        2)
            start_services "minimal"
            ;;
        3)
            start_services "postgres"
            ;;
        4)
            stop_services
            ;;
        5)
            restart_services
            ;;
        6)
            show_logs
            ;;
        7)
            clean_data
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            exit 1
            ;;
    esac
}

# Handle signals gracefully
trap 'echo -e "\n${YELLOW}üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...${NC}"; exit 0' SIGTERM SIGINT

# Run main function
main "$@"