import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, CommandHandler, filters, CallbackContext
from django.conf import settings
from channels.layers import get_channel_layer
from asgiref.sync import sync_to_async
from .models import Message, TelegramUser, ChatSession, Document, ApplicantProfile
from .services.openai_service import UniversityAIService
import json

logger = logging.getLogger(__name__)

# Initialize bot and services
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
channel_layer = get_channel_layer()
ai_service = UniversityAIService()

# Bot states
USER_STATES = {}

class TelegramBotHandler:
    
    @staticmethod
    async def start_command(update: Update, context: CallbackContext):
        """Handle /start command"""
        user = update.effective_user
        
        # Get or create telegram user
        telegram_user = await sync_to_async(TelegramUser.objects.get_or_create)(
            telegram_id=str(user.id),
            defaults={
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
            }
        )
        
        welcome_text = (
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ú–í–≠–£!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, "
            "–ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", callback_data="user_type_applicant")],
            [InlineKeyboardButton("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç", callback_data="user_type_student")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    @staticmethod
    async def button_handler(update: Update, context: CallbackContext):
        """Handle inline keyboard button presses"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        data = query.data
        
        if data.startswith("user_type_"):
            await TelegramBotHandler.handle_user_type_selection(query, data)
        elif data.startswith("applicant_"):
            await TelegramBotHandler.handle_applicant_menu(query, data)
        elif data == "back_to_main":
            await TelegramBotHandler.show_main_menu(query)
        elif data == "back_to_applicant":
            await TelegramBotHandler.show_applicant_menu(query)
    
    @staticmethod
    async def handle_user_type_selection(query, data):
        """Handle user type selection"""
        user_type = data.replace("user_type_", "")
        user_id = str(query.from_user.id)
        
        # Update user type in database
        telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user_id)
        telegram_user.user_type = user_type
        await sync_to_async(telegram_user.save)()
        
        if user_type == "applicant":
            await TelegramBotHandler.show_applicant_menu(query)
        elif user_type == "student":
            await TelegramBotHandler.show_student_menu(query)
    
    @staticmethod
    async def show_main_menu(query):
        """Show main menu"""
        text = "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:"
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", callback_data="user_type_applicant")],
            [InlineKeyboardButton("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç", callback_data="user_type_student")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    @staticmethod
    async def show_applicant_menu(query):
        """Show applicant menu"""
        text = (
            "üìö –ú–µ–Ω—é –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="applicant_ask_question")],
            [InlineKeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="applicant_send_docs")],
            [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π", callback_data="applicant_contact_admission")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    @staticmethod
    async def show_student_menu(query):
        """Show student menu (placeholder)"""
        text = (
            "üë®‚Äçüéì –ú–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n"
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    @staticmethod
    async def handle_applicant_menu(query, data):
        """Handle applicant menu actions"""
        user_id = str(query.from_user.id)
        
        if data == "applicant_ask_question":
            await TelegramBotHandler.start_ai_chat(query)
        elif data == "applicant_send_docs":
            await TelegramBotHandler.show_document_requirements(query)
        elif data == "applicant_upload_docs":
            await TelegramBotHandler.start_document_upload(query)
        elif data == "applicant_contact_admission":
            await TelegramBotHandler.start_admission_chat(query)
        elif data.startswith("doc_type_"):
            await TelegramBotHandler.handle_document_type_selection(query, data)
    
    @staticmethod
    async def start_ai_chat(query):
        """Start AI chat session"""
        user_id = str(query.from_user.id)
        USER_STATES[user_id] = "ai_chat"
        
        text = (
            "ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ú–í–≠–£:\n"
            "‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
            "‚Ä¢ –£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∞—á–∏\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∞–¥—Ä–µ—Å–∞\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞", callback_data="back_to_applicant")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    @staticmethod
    async def show_document_requirements(query):
        """Show document requirements"""
        text = (
            "üìÑ –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
            "üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            "1Ô∏è‚É£ –ü–∞—Å–ø–æ—Ä—Ç (–∫–æ–ø–∏—è)\n"
            "2Ô∏è‚É£ –ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –∫–æ–ø–∏—è)\n"
            "3Ô∏è‚É£ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3√ó4 (6 —à—Ç—É–∫)\n"
            "4Ô∏è‚É£ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Ñ–æ—Ä–º–∞ 086/—É)\n"
            "5Ô∏è‚É£ –í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç (–¥–ª—è –º—É–∂—á–∏–Ω)\n\n"
            "üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            "‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ—Å–æ–±—ã—Ö –ø—Ä–∞–≤–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ª–∏—á–Ω–æ –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é."
        )
        
        # Set state for document upload
        user_id = str(query.from_user.id)
        
        keyboard = [
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="applicant_upload_docs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞", callback_data="back_to_applicant")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    @staticmethod
    async def start_admission_chat(query):
        """Start admission office chat"""
        user_id = str(query.from_user.id)
        USER_STATES[user_id] = "admission_chat"
        
        # Create chat session
        telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user_id)
        chat_session = await sync_to_async(ChatSession.objects.create)(
            telegram_user=telegram_user,
            session_type='admission'
        )
        
        text = (
            "üí¨ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏...\n\n"
            "–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É —Å –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π –ú–í–≠–£.\n"
            "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="back_to_applicant")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
        
        # Notify web admin about new chat
        await TelegramBotHandler.notify_web_admin_new_chat(telegram_user, chat_session)
    
    @staticmethod
    async def notify_web_admin_new_chat(telegram_user, chat_session):
        """Notify web admin about new chat session"""
        try:
            await channel_layer.group_send(
                'admin_chat',
                {
                    'type': 'new_chat_session',
                    'session_id': str(chat_session.id),
                    'user_info': {
                        'telegram_id': telegram_user.telegram_id,
                        'username': telegram_user.username,
                        'first_name': telegram_user.first_name,
                        'user_type': telegram_user.user_type
                    },
                    'created_at': chat_session.created_at.isoformat()
                }
            )
        except Exception as e:
            logger.error(f"Error notifying web admin: {e}")
    
    @staticmethod
    async def handle_message(update: Update, context: CallbackContext):
        """Handle regular text messages"""
        user = update.effective_user
        user_id = str(user.id)
        message_text = update.message.text
        
        # Get user state
        state = USER_STATES.get(user_id, "")
        
        if state == "ai_chat":
            await TelegramBotHandler.handle_ai_question(update, message_text)
        elif state == "admission_chat":
            await TelegramBotHandler.handle_admission_message(update, message_text)
        elif state == "uploading_docs":
            await TelegramBotHandler.handle_document_info(update, message_text)
        else:
            # Default response
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
            )
    
    @staticmethod
    async def handle_ai_question(update: Update, question: str):
        """Handle AI question"""
        user_id = str(update.effective_user.id)
        
        # Send "typing" action
        await bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # Get AI response
            ai_response = await sync_to_async(ai_service.get_ai_response)(question)
            
            # Save message to database
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user_id)
            await sync_to_async(Message.objects.create)(
                text=question,
                source='telegram',
                direction='incoming',
                message_type='ai_question',
                telegram_user=telegram_user
            )
            
            await sync_to_async(Message.objects.create)(
                text=ai_response,
                source='telegram',
                direction='outgoing',
                message_type='ai_question',
                telegram_user=telegram_user
            )
            
            # Send response
            keyboard = [
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="applicant_ask_question")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_applicant")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(ai_response, reply_markup=reply_markup)
            
            # Clear state to allow new questions
            USER_STATES[user_id] = "ai_chat"
            
        except Exception as e:
            logger.error(f"Error handling AI question: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @staticmethod
    async def handle_admission_message(update: Update, message_text: str):
        """Handle admission office chat message"""
        user_id = str(update.effective_user.id)
        
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user_id)
            
            # Save message to database
            message = await sync_to_async(Message.objects.create)(
                text=message_text,
                source='telegram',
                direction='incoming',
                telegram_user=telegram_user
            )
            
            # Send to web admin interface
            await channel_layer.group_send(
                'admin_chat',
                {
                    'type': 'telegram_message',
                    'message': message_text,
                    'source': 'telegram',
                    'direction': 'incoming',
                    'telegram_user_id': user_id,
                    'telegram_username': telegram_user.username or telegram_user.first_name,
                    'created_at': message.created_at.isoformat(),
                    'message_id': str(message.id)
                }
            )
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞..."
            )
            
        except Exception as e:
            logger.error(f"Error handling admission message: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    @staticmethod
    async def handle_document(update: Update, context: CallbackContext):
        """Handle document upload"""
        user_id = str(update.effective_user.id)
        
        if USER_STATES.get(user_id) != "uploading_docs":
            return
        
        document = update.message.document
        photo = update.message.photo
        
        if document or photo:
            try:
                telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user_id)
                
                if document:
                    file_info = document
                    file_id = document.file_id
                    file_name = document.file_name or "document"
                    file_size = document.file_size
                else:  # photo
                    file_info = photo[-1]  # Get highest resolution
                    file_id = photo[-1].file_id
                    file_name = "photo.jpg"
                    file_size = photo[-1].file_size
                
                # Save document info
                doc = await sync_to_async(Document.objects.create)(
                    telegram_user=telegram_user,
                    document_type='other',  # Will be updated when user specifies
                    file_id=file_id,
                    file_name=file_name,
                    file_size=file_size
                )
                
                # Ask for document type
                keyboard = [
                    [InlineKeyboardButton("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", callback_data=f"doc_type_passport_{doc.id}")],
                    [InlineKeyboardButton("üéì –ê—Ç—Ç–µ—Å—Ç–∞—Ç", callback_data=f"doc_type_education_cert_{doc.id}")],
                    [InlineKeyboardButton("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", callback_data=f"doc_type_photo_{doc.id}")],
                    [InlineKeyboardButton("üè• –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞", callback_data=f"doc_type_medical_cert_{doc.id}")],
                    [InlineKeyboardButton("üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç", callback_data=f"doc_type_military_id_{doc.id}")],
                    [InlineKeyboardButton("üìã –î—Ä—É–≥–æ–µ", callback_data=f"doc_type_other_{doc.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –ø–æ–ª—É—á–µ–Ω!\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
                    reply_markup=reply_markup
                )
                
            except Exception as e:
                logger.error(f"Error handling document: {e}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

# Setup application
def setup_telegram_application():
    """Setup telegram application with handlers"""
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", TelegramBotHandler.start_command))
    application.add_handler(CallbackQueryHandler(TelegramBotHandler.button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, TelegramBotHandler.handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, TelegramBotHandler.handle_document))
    
    return application

# Global application instance
application = setup_telegram_application()

async def start_telegram_bot():
    """Start the Telegram bot"""
    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("Telegram bot started successfully")
    except Exception as e:
        logger.error(f"Failed to start Telegram bot: {e}")

async def stop_telegram_bot():
    """Stop the Telegram bot"""
    try:
        await application.stop()
        logger.info("Telegram bot stopped")
    except Exception as e:
        logger.error(f"Error stopping Telegram bot: {e}")